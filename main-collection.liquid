<!-- FRESH WISHLIST SYSTEM -->
<script>
  // Simple Wishlist Management
  const Wishlist = {
    // Storage key
    STORAGE_KEY: 'simple_wishlist',
    
    // Get wishlist from localStorage
    get() {
      try {
        return JSON.parse(localStorage.getItem(this.STORAGE_KEY)) || [];
      } catch (e) {
        return [];
      }
    },
    
    // Save wishlist to localStorage
    save(items) {
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(items));
    },
    
    // Add product to wishlist
    add(productData) {
      const items = this.get();
      const exists = items.find(item => item.id === productData.id);
      
      if (!exists) {
        items.push(productData);
        this.save(items);
        console.log('‚úÖ Added to wishlist:', productData.title);
      }
      
      return items;
    },
    
    // Remove product from wishlist
    remove(productId) {
      const items = this.get();
      const filtered = items.filter(item => item.id !== productId);
      this.save(filtered);
      console.log('üóëÔ∏è Removed from wishlist:', productId);
      return filtered;
    },
    
    // Check if product is in wishlist
    has(productId) {
      const items = this.get();
      return items.some(item => item.id === productId);
    },
    
    // Clear all wishlist data
    clear() {
      localStorage.removeItem(this.STORAGE_KEY);
      console.log('üßπ Wishlist cleared');
    }
  };

  // Heart icon toggle function
  window.toggleWishlist = function(button, productId, event) {
    if (event) {
      event.preventDefault();
      event.stopPropagation();
    }
    
    const isActive = button.classList.contains('active');
    
    if (isActive) {
      // Remove from wishlist
      button.classList.remove('active');
      button.title = 'Add to Wishlist';
      Wishlist.remove(productId);
      
      // Update modal if open
      if (document.getElementById('wishlistModal')?.classList.contains('active')) {
        loadWishlistModal();
      }
    } else {
      // Add to wishlist
      const productCard = button.closest('.product-card, .product-grid-item, .grid-item, .product-item');
      
      if (productCard) {
        // Extract product data
        const titleElement = productCard.querySelector('a.product-name');
        const priceElement = productCard.querySelector('.current-price');
        const imageElement = productCard.querySelector('img');
        const linkElement = productCard.querySelector('a[href*="products"]');
        
        // Debug logging
        console.log('üîç Debug - Product ID:', productId);
        console.log('üîç Debug - Title element:', titleElement);
        console.log('üîç Debug - Title text:', titleElement ? titleElement.textContent.trim() : 'NOT FOUND');
        
        const productData = {
          id: productId,
          title: titleElement ? titleElement.textContent.trim() : 'Product',
          price: priceElement ? priceElement.textContent.trim() : '',
          image: imageElement ? imageElement.src : '',
          url: linkElement ? linkElement.href : `/products/${productId}`
        };
        
        button.classList.add('active');
        button.title = 'Remove from Wishlist';
        Wishlist.add(productData);
        
        // Update modal if open
        if (document.getElementById('wishlistModal')?.classList.contains('active')) {
          loadWishlistModal();
        }
      }
    }
  };

  // Open wishlist modal
  window.openWishlistModal = function() {
    const modal = document.getElementById('wishlistModal');
    const overlay = document.getElementById('wishlistModalOverlay');
    
    if (modal && overlay) {
      modal.classList.add('active');
      overlay.classList.add('active');
      document.body.style.overflow = 'hidden';
      loadWishlistModal();
    }
  };

  // Close wishlist modal
  window.closeWishlistModal = function() {
    const modal = document.getElementById('wishlistModal');
    const overlay = document.getElementById('wishlistModalOverlay');
    
    if (modal && overlay) {
      modal.classList.remove('active');
      overlay.classList.remove('active');
      document.body.style.overflow = '';
    }
  };

  // Load wishlist content in modal
  window.loadWishlistModal = function() {
    const content = document.getElementById('wishlistModalContent');
    if (!content) return;
    
    const items = Wishlist.get();
    
    if (items.length === 0) {
      content.innerHTML = `
        <div class="wishlist-empty">
          <svg class="wishlist-empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
          </svg>
          <h4>Your wishlist is empty</h4>
          <p>Click the heart icon on products to add them here!</p>
          <button class="browse-btn" onclick="closeWishlistModal()">
            Continue Shopping
          </button>
        </div>
      `;
      return;
    }
    
    const itemsHTML = items.map(item => `
      <div class="wishlist-modal-item" data-product-id="${item.id}">
        <button class="remove-modal-wishlist-btn" onclick="removeFromWishlist('${item.id}')" title="Remove from wishlist">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
        <div class="wishlist-modal-item-image">
          <img src="${item.image}" alt="${item.title}" loading="lazy">
        </div>
        <div class="wishlist-modal-item-info">
          <h4 class="wishlist-modal-item-title">${item.title}</h4>
          <div class="wishlist-modal-item-price">${item.price}</div>
          <div class="wishlist-modal-item-actions">
            <a href="${item.url}" class="view-modal-btn">
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
                <circle cx="12" cy="12" r="3"/>
              </svg>
              View Product
            </a>
          </div>
        </div>
      </div>
    `).join('');
    
    content.innerHTML = `<div class="wishlist-items">${itemsHTML}</div>`;
  };

  // Remove item from wishlist (called from modal)
  window.removeFromWishlist = function(productId) {
    Wishlist.remove(productId);
    
    // Update heart icon on page
    document.querySelectorAll('.wishlist-btn').forEach(button => {
      const onclick = button.getAttribute('onclick');
      if (onclick && onclick.includes(productId)) {
        button.classList.remove('active');
        button.title = 'Add to Wishlist';
      }
    });
    
    // Refresh modal
    loadWishlistModal();
  };

  // Initialize heart states on page load
  document.addEventListener('DOMContentLoaded', function() {
    const wishlistItems = Wishlist.get();
    const wishlistIds = wishlistItems.map(item => item.id);
    
    console.log('üîÑ Restoring heart states for', wishlistIds.length, 'products');
    
    document.querySelectorAll('.wishlist-btn').forEach(button => {
      const onclick = button.getAttribute('onclick');
      if (onclick) {
        const match = onclick.match(/'(\d+)'/);
        if (match) {
          const productId = match[1];
          if (wishlistIds.includes(productId)) {
            button.classList.add('active');
            button.title = 'Remove from Wishlist';
          } else {
            button.classList.remove('active');
            button.title = 'Add to Wishlist';
          }
        }
      }
    });
    
    console.log('‚úÖ Heart states restored');
  });

  console.log('‚úÖ Fresh wishlist system loaded');
</script>

<!-- Additional script functionality -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Share functionality
    window.shareProduct = async function() {
      const url = window.location.href;
      const title = document.querySelector('.collection-title-header')?.textContent || 'Check out this collection';
      const shareData = {
        title: title,
        text: "Check out this collection: " + title,
        url: url
      };

      try {
        if (navigator.share) {
          await navigator.share(shareData);
          console.log('Collection shared successfully');
        } else {
          // Fallback to clipboard copy
          await navigator.clipboard.writeText(url);
          // Show success message
          const successMsg = document.createElement('div');
          successMsg.style.cssText = `
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #1B224B;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 9999;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
          `;
          successMsg.textContent = 'Link copied to clipboard!';
          document.body.appendChild(successMsg);
          setTimeout(() => successMsg.remove(), 2000);
        }
      } catch (err) {
        console.error('Error sharing collection:', err);
      }
    };

    // Function to update cart count
    function updateCartCount(count) {
      // Update cart count elements used in collection page
      const cartCounts = document.querySelectorAll('.cart-count');
      cartCounts.forEach(element => {
        element.textContent = count || '';
        element.style.display = count > 0 ? 'flex' : 'none';
      });
      
      // Update other cart badge elements (for compatibility with other sections)
      const cartBadges = document.querySelectorAll('.cart-badge');
      const cartBubbles = document.querySelectorAll('.cart-count-bubble');
      
      cartBadges.forEach(badge => {
        badge.textContent = count;
      });
      
      cartBubbles.forEach(bubble => {
        if (count > 0) {
          if (!bubble.querySelector('.cart-badge')) {
            bubble.innerHTML = `<span class="cart-badge">${count}</span>`;
          }
        } else {
          bubble.innerHTML = '';
        }
      });
    }

    // Function to fetch cart data
    function fetchCartData() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          updateCartCount(cart.item_count);
        })
        .catch(error => console.error('Error fetching cart:', error));
    }

    // Initial cart count update
    fetchCartData();

    // Add to Cart functionality
    const addToCartForms = document.querySelectorAll('.add-to-cart-form');
    
    addToCartForms.forEach(form => {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const submitButton = form.querySelector('.add-to-cart');
        const originalText = submitButton.innerHTML;
        
        // Show loading state
        submitButton.innerHTML = '<svg class="spinner" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/></svg>Adding...';
        submitButton.disabled = true;
        
        // Add to cart using Fetch API
        fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            items: [{
              id: form.querySelector('input[name="id"]').value,
              quantity: parseInt(form.querySelector('input[name="quantity"]').value, 10)
            }]
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.status) {
            throw new Error(data.description || 'Error adding product to cart');
          }
          
          // Update cart count immediately after successful addition
          fetchCartData();
          
          // Show success state
          submitButton.innerHTML = '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M20 6L9 17l-5-5"/></svg>Added!';
          
          // Open the new cart drawer after successful addition
          setTimeout(() => {
            if (window.newCartDrawer) {
              window.newCartDrawer.open();
            }
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;
          }, 500); // Reduced timeout to show success briefly then open drawer
        })
        .catch(error => {
          console.error('Error:', error);
          submitButton.innerHTML = '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M18 6L6 18M6 6l12 12"/></svg>Error';
          setTimeout(() => {
            submitButton.innerHTML = originalText;
            submitButton.disabled = false;
          }, 2000);
        });
      });
    });

    // Listen for cart updates from multiple sources
    document.addEventListener('cart:updated', function(event) {
      if (event.detail && event.detail.cart) {
        updateCartCount(event.detail.cart.item_count);
      } else {
        fetchCartData();
      }
    });

    document.addEventListener('cart:refresh', function(event) {
      fetchCartData();
    });

    document.addEventListener('cart:change', function(event) {
      fetchCartData();
    });

    document.addEventListener('product:added', function(event) {
      fetchCartData();
    });

    // Update cart count when products are added via quick add or other mechanisms
    document.addEventListener('variant:added', function(event) {
      fetchCartData();
    });

    // Listen for Shopify's built-in cart events
    document.addEventListener('cart:item-added', function(event) {
      fetchCartData();
    });

    // Update cart count when the page becomes visible again (user switches tabs)
    document.addEventListener('visibilitychange', function() {
      if (document.visibilityState === 'visible') {
        fetchCartData();
      }
    });

    // Update cart count when user focuses back on the page
    window.addEventListener('focus', function() {
      fetchCartData();
    });

    // Menu functionality
    window.toggleMenu = function() {
      const overlay = document.querySelector('.menu-overlay');
      const drawer = document.querySelector('.menu-drawer');
      
      overlay.classList.toggle('active');
      drawer.classList.toggle('active');
      
      // Prevent body scroll when menu is open
      document.body.style.overflow = drawer.classList.contains('active') ? 'hidden' : '';
    }

    // Share product functionality
    window.shareProductLink = async function(productUrl, productTitle) {
      const fullUrl = 'https://' + productUrl;
      const shareData = {
        title: productTitle,
        text: `Check out this product: ${productTitle}`,
        url: fullUrl
      };

      try {
        if (navigator.share) {
          await navigator.share(shareData);
        } else {
          // Fallback to clipboard copy
          await navigator.clipboard.writeText(fullUrl);
          
          // Show success message
          const successMsg = document.createElement('div');
          successMsg.style.cssText = `
            position: fixed;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: #1B224B;
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 14px;
            z-index: 9999;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
          `;
          successMsg.textContent = 'Product link copied to clipboard!';
          document.body.appendChild(successMsg);
          setTimeout(() => successMsg.remove(), 2000);
        }
      } catch (err) {
        console.error('Error sharing product:', err);
      }
    }

    // Product Image Swiper Functionality
    const swiperStates = new Map();

    function initSwiper(productId) {
      if (!swiperStates.has(productId)) {
        swiperStates.set(productId, {
          currentSlide: 0,
          totalSlides: 0,
          startX: 0,
          startY: 0,
          currentX: 0,
          currentY: 0,
          isDragging: false
        });
      }

      const swiper = document.querySelector(`[data-product-id="${productId}"]`);
      if (!swiper) return;

      const container = swiper.querySelector('.swiper-container');
      const slides = swiper.querySelectorAll('.swiper-slide');
      const state = swiperStates.get(productId);
      
      state.totalSlides = slides.length;

      // Touch Events
      container.addEventListener('touchstart', (e) => handleTouchStart(e, productId), { passive: true });
      container.addEventListener('touchmove', (e) => handleTouchMove(e, productId), { passive: true });
      container.addEventListener('touchend', (e) => handleTouchEnd(e, productId), { passive: true });

      // Mouse Events for desktop
      container.addEventListener('mousedown', (e) => handleMouseStart(e, productId));
      container.addEventListener('mousemove', (e) => handleMouseMove(e, productId));
      container.addEventListener('mouseup', (e) => handleMouseEnd(e, productId));
      container.addEventListener('mouseleave', (e) => handleMouseEnd(e, productId));

      // Prevent default drag behavior
      container.addEventListener('dragstart', (e) => e.preventDefault());
    }

    function handleTouchStart(e, productId) {
      const state = swiperStates.get(productId);
      const touch = e.touches[0];
      state.startX = touch.clientX;
      state.startY = touch.clientY;
      state.isDragging = true;
    }

    function handleTouchMove(e, productId) {
      const state = swiperStates.get(productId);
      if (!state.isDragging) return;

      const touch = e.touches[0];
      state.currentX = touch.clientX;
      state.currentY = touch.clientY;
    }

    function handleTouchEnd(e, productId) {
      const state = swiperStates.get(productId);
      if (!state.isDragging) return;

      const deltaX = state.currentX - state.startX;
      const deltaY = Math.abs(state.currentY - state.startY);
      
      // Only trigger swipe if horizontal movement is greater than vertical
      if (Math.abs(deltaX) > 50 && Math.abs(deltaX) > deltaY) {
        if (deltaX > 0) {
          previousSlide(productId);
        } else {
          nextSlide(productId);
        }
      }

      state.isDragging = false;
    }

    function handleMouseStart(e, productId) {
      const state = swiperStates.get(productId);
      state.startX = e.clientX;
      state.startY = e.clientY;
      state.isDragging = true;
      e.preventDefault();
    }

    function handleMouseMove(e, productId) {
      const state = swiperStates.get(productId);
      if (!state.isDragging) return;

      state.currentX = e.clientX;
      state.currentY = e.clientY;
    }

    function handleMouseEnd(e, productId) {
      const state = swiperStates.get(productId);
      if (!state.isDragging) return;

      const deltaX = state.currentX - state.startX;
      const deltaY = Math.abs(state.currentY - state.startY);
      
      if (Math.abs(deltaX) > 50 && Math.abs(deltaX) > deltaY) {
        if (deltaX > 0) {
          previousSlide(productId);
        } else {
          nextSlide(productId);
        }
      }

      state.isDragging = false;
    }

    function updateSlide(productId, slideIndex) {
      const swiper = document.querySelector(`[data-product-id="${productId}"]`);
      if (!swiper) return;

      const container = swiper.querySelector('.swiper-container');
      const dots = swiper.querySelectorAll('.swiper-dot');
      const state = swiperStates.get(productId);

      // Update slide position
      container.style.transform = `translateX(-${slideIndex * 100}%)`;
      state.currentSlide = slideIndex;

      // Update pagination dots
      dots.forEach((dot, index) => {
        dot.classList.toggle('active', index === slideIndex);
      });
    }

    function nextSlide(productId) {
      const state = swiperStates.get(productId);
      const nextIndex = (state.currentSlide + 1) % state.totalSlides;
      updateSlide(productId, nextIndex);
    }

    function previousSlide(productId) {
      const state = swiperStates.get(productId);
      const prevIndex = state.currentSlide === 0 ? state.totalSlides - 1 : state.currentSlide - 1;
      updateSlide(productId, prevIndex);
    }

    // Global functions for navigation clicks
    window.nextImage = function(event, productId) {
      event.preventDefault();
      event.stopPropagation();
      nextSlide(productId);
    };

    window.previousImage = function(event, productId) {
      event.preventDefault();
      event.stopPropagation();
      previousSlide(productId);
    };

    window.goToSlide = function(event, productId, slideIndex) {
      event.preventDefault();
      event.stopPropagation();
      updateSlide(productId, slideIndex);
    };

    // Initialize all swipers
    document.querySelectorAll('.product-swiper').forEach(swiper => {
      const productId = swiper.getAttribute('data-product-id');
      initSwiper(productId);
    });

    // Initialize Loox ratings
    function initLooxRatings() {
      try {
        // Method 1: Modern Loox API
        if (window.loox) {
          if (typeof window.loox.runFunctions === 'function') {
            window.loox.runFunctions();
          }
          if (typeof window.loox.initRatings === 'function') {
            window.loox.initRatings();
          }
        }
        
        // Method 2: Legacy Loox API
        if (window.Loox && typeof window.Loox.createRatingElement === 'function') {
          document.querySelectorAll('.loox-rating').forEach(element => {
            const productId = element.getAttribute('data-product-id') || element.getAttribute('data-id');
            if (productId && !element.hasAttribute('data-loox-initialized')) {
              window.Loox.createRatingElement(element, {
                productId: productId,
                starSize: 14,
                hideText: false
              });
              element.setAttribute('data-loox-initialized', 'true');
            }
          });
        }

        // Method 3: Alternative Loox initialization
        if (window.LooxReviews && typeof window.LooxReviews.init === 'function') {
          window.LooxReviews.init();
        }

        // Method 4: jQuery-based Loox (older versions)
        if (window.jQuery && window.jQuery.fn.looxReviews) {
          window.jQuery('.loox-rating, .loox-reviews-default').looxReviews();
        }
        
        console.log('Loox ratings initialized');
      } catch (error) {
        console.warn('Loox initialization failed:', error);
      }
    }

    // Multiple initialization strategies
    initLooxRatings();

    // Listen for Loox script loading events
    document.addEventListener('loox:loaded', initLooxRatings);
    document.addEventListener('loox:initialized', initLooxRatings);
    document.addEventListener('DOMContentLoaded', initLooxRatings);
    
    // Fallback: retry periodically
    setTimeout(initLooxRatings, 1000);
    setTimeout(initLooxRatings, 3000);
    
    // Observer for dynamically loaded content
    if (window.MutationObserver) {
      const observer = new MutationObserver((mutations) => {
        let shouldInitialize = false;
        mutations.forEach((mutation) => {
          if (mutation.type === 'childList') {
            mutation.addedNodes.forEach((node) => {
              if (node.nodeType === 1 && (
                node.classList?.contains('loox-rating') || 
                node.classList?.contains('loox-reviews-default') ||
                node.querySelector?.('.loox-rating, .loox-reviews-default')
              )) {
                shouldInitialize = true;
              }
            });
          }
        });
        if (shouldInitialize) {
          setTimeout(initLooxRatings, 100);
        }
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    }
  });
</script>

{% comment %}theme-check-disable AssetPreload{% endcomment %}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

         /* FORCE MOBILE VERSION ON ALL DEVICES - Override ALL desktop styles */
  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px !important;
      padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px !important;
    }
    
    /* NUCLEAR OVERRIDE: Force mobile layout on desktop */
    .page-header {
      position: fixed !important;
      top: 0 !important;
      width: 100% !important;
    }
    
    .product-grid {
      display: grid !important;
      grid-template-columns: repeat(2, 1fr) !important;
      gap: 8px !important;
      padding: 8px !important;
    }
    
    .page-width,
    .collection,
    .main-content {
      max-width: none !important;
      width: 100% !important;
      margin: 0 !important;
      padding: 0 !important;
    }
    
    .header {
      display: block !important;
    }
    
    /* Hide any desktop navigation */
    .desktop-nav,
    .header__nav {
      display: none !important;
    }
  }
  
  @media screen and (min-width: 990px) {
    .product-grid { grid-template-columns: repeat(2, 1fr) !important; }
    .page-width { max-width: none !important; }
  }
  
  @media screen and (min-width: 1200px) {
    .product-grid { grid-template-columns: repeat(2, 1fr) !important; }
    .page-width { max-width: none !important; }
  }

  .top-nav {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 6px 12px;
    z-index: 1000;
    background: #fff;
    box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    height: 52px;
  }

  .nav-left {
    display: flex;
    align-items: center;
    gap: 12px;
    flex: 1;
    min-width: 0;
    max-width: 70%;
  }

  .collection-title-header {
    color: #1B224B;
    font-size: 16px;
    font-weight: 600;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin: 0;
    padding-right: 8px;
    text-transform: capitalize;
    display: flex;
    flex-direction: column;
    line-height: 1.2;
  }

  .collection-subtitle {
    font-size: 12px;
    color: #666;
    font-weight: normal;
    margin-top: 2px;
  }

  .nav-right {
    display: flex;
    gap: 8px;
    flex-shrink: 0;
    align-items: center;
  }

  .nav-button {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: white;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    text-decoration: none;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  
  .nav-button:active {
    transform: scale(0.95);
  }

  .nav-button svg {
    width: 22px;
    height: 22px;
    color: #1B224B;
    stroke-width: 2.5;
  }

  .cart-button {
    position: relative;
  }

  .cart-count {
    position: absolute;
    top: -4px;
    right: -6px;
    background: #E73C17;
    color: white;
    font-size: 12px;
    font-weight: 600;
    min-width: 18px;
    height: 18px;
    border-radius: 9px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 4px;
    line-height: 1;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .cart-count:empty {
    display: none;
  }

  .product-grid {
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding: 12px;
    background: #ffffff;
    max-width: 800px;
    margin: 0 auto;
  }

  .product-card {
    display: flex;
    background: white;
    border-radius: 8px;
    padding: 0;
    margin: 0;
    box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid #E5E7EB;
  }

  .product-card:hover {
    box-shadow: 0 8px 16px rgba(0,0,0,0.1);
  }

  .product-image-wrapper {
    position: relative;
    width: 240px;
    flex-shrink: 0;
    padding: 0;
    border-radius: 8px 0 0 8px;
    background: white;
    overflow: hidden;
  }

  .product-image-wrapper::before {
    content: '';
    display: block;
    padding-top: 100%;
  }

  .product-swiper {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .swiper-container {
    position: relative;
    width: 100%;
    height: 100%;
    display: flex;
    transition: transform 0.3s ease;
  }

  .swiper-slide {
    flex: 0 0 100%;
    width: 100%;
    height: 100%;
    position: relative;
  }

  .product-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    transition: transform 0.3s ease;
  }

  .product-info {
    flex: 1;
    padding: 16px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-width: 0;
    gap: 12px;
  }

  .product-brand {
    font-size: 16px;
    font-weight: 600;
    color: #1B224B;
    margin: 0;
    line-height: 1.3;
  }

  .product-name {
    font-size: 14px;
    color: #6B7280;
    margin: 0 0 8px 0;
    line-height: 1.4;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .product-name:hover {
    color: #1B224B;
  }

  .product-price {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-bottom: 12px;
  }

  .current-price {
    font-size: 24px;
    font-weight: 600;
    color: #1B224B;
  }

  .original-price {
    font-size: 16px;
    color: #9CA3AF;
    text-decoration: line-through;
  }

  .quick-actions {
    display: flex;
    gap: 6px;
    flex-wrap: wrap;
  }

  .action-btn {
    width: 40px;
    height: 40px;
    border-radius: 6px;
    background: #F3F4F6;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .action-btn:hover {
    background: #E5E7EB;
  }

  .action-btn svg {
    width: 20px;
    height: 20px;
    color: #1B224B;
  }

  /* Wishlist Heart States */
  .wishlist-btn.active {
    background: #FEF2F2;
  }

  .wishlist-btn.active svg {
    color: #E73C17;
    fill: #E73C17;
  }

  .product-link {
    display: block;
    width: 100%;
    height: 100%;
    text-decoration: none;
    color: inherit;
  }

  .product-name {
    font-size: 14px;
    color: #6B7280;
    margin: 0 0 8px 0;
    line-height: 1.4;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .product-name:hover {
    color: #1B224B;
  }

  .swiper-pagination {
    position: absolute;
    bottom: 8px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 4px;
    z-index: 2;
  }

  .swiper-dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.4);
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .swiper-dot.active {
    background: #1B224B;
    transform: scale(1.2);
  }

  .swiper-navigation {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 24px;
    height: 24px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0;
    transition: all 0.2s ease;
    z-index: 2;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .product-image-wrapper:hover .swiper-navigation {
    opacity: 1;
  }

  .swiper-prev {
    left: 8px;
  }

  .swiper-next {
    right: 8px;
  }

  .swiper-navigation svg {
    width: 12px;
    height: 12px;
    color: #1B224B;
  }

  .product-info-top {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .feature-rating {
    background: #F9FAFB !important;
    border: none !important;
  }

  .feature-rating .product-rating {
    margin: 0;
    display: flex;
    align-items: center;
    gap: 4px;
    width: 100%;
  }

  .feature-rating .loox-rating {
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 13px;
    color: #6B7280;
    white-space: nowrap;
  }

  .feature-rating .loox-rating-stars {
    display: flex;
    align-items: center;
  }

  .feature-rating .loox-rating-count {
    color: #6B7280;
    font-size: 13px;
  }

  /* Loox star styling in features */
  .feature-rating .loox-icon {
    width: 14px !important;
    height: 14px !important;
  }

  .feature-rating .loox-rating-stars svg {
    width: 14px;
    height: 14px;
    color: #059669;
  }

  .feature-rating .loox-rating-stars {
    margin-right: 4px;
  }

  .color-variants {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 4px;
  }

  .color-variant {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    border: 2px solid white;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
  }

  .color-variant:hover {
    transform: scale(1.1);
    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
  }

  .color-variant.active {
    border: 2px solid #2563EB;
  }

  .color-variant.active::after {
    content: '';
    position: absolute;
    inset: -4px;
    border: 1px solid #2563EB;
    border-radius: 50%;
  }

  .color-variant-tooltip {
    position: absolute;
    bottom: calc(100% + 8px);
    left: 50%;
    transform: translateX(-50%);
    background: #1B224B;
    color: white;
    font-size: 12px;
    padding: 4px 8px;
    border-radius: 4px;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    pointer-events: none;
  }

  .color-variant-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    border-top: 4px solid #1B224B;
  }

  .color-variant:hover .color-variant-tooltip {
    opacity: 1;
    visibility: visible;
  }

  .colors-available {
    font-size: 13px;
    color: #6B7280;
    margin: 0;
  }

  .price-info {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 8px;
  }

  .discount {
    font-size: 16px;
    color: #059669;
    font-weight: 500;
  }

  .product-features {
    display: flex;
    gap: 12px;
    width: 100%;
    overflow-x: auto;
    scrollbar-width: none;
    -webkit-overflow-scrolling: touch;
    padding: 2px;
    margin: -2px;
  }

  .product-features::-webkit-scrollbar {
    display: none;
  }

  .feature {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 13px;
    color: #6B7280;
    padding: 6px 10px;
    background: #F9FAFB;
    border-radius: 6px;
    white-space: nowrap;
    flex-shrink: 0;
  }

  .feature svg {
    width: 14px;
    height: 14px;
    color: #059669;
    flex-shrink: 0;
  }

  .product-actions {
    display: flex;
    gap: 8px;
    align-items: center;
    margin-top: auto;
    flex-wrap: wrap;
  }

  .add-to-cart {
    min-width: 140px;
    height: 40px;
    padding: 0 16px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    white-space: nowrap;
    background: #1B224B;
    color: white;
    border: none;
  }

  .add-to-cart:hover {
    background: #2A3362;
  }

  .add-to-cart svg {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }

  .product-details {
    margin-top: 16px;
    padding-top: 16px;
    border-top: 1px solid #E5E7EB;
  }

  @media screen and (max-width: 749px) {
    .product-card {
      flex-direction: column;
    }

    .product-image-wrapper {
      width: 100%;
      border-radius: 8px 8px 0 0;
      padding: 12px;
    }

    .product-info {
      padding: 12px;
      gap: 10px;
    }

    .product-info-top {
      gap: 8px;
    }

    .product-features {
      gap: 8px;
    }

    .feature {
      font-size: 12px;
      padding: 4px 8px;
    }

    .feature svg {
      width: 12px;
      height: 12px;
    }

    .add-to-cart {
      min-width: 130px;
      height: 38px;
      padding: 0 14px;
      font-size: 13px;
    }

    .action-btn {
      width: 38px;
      height: 38px;
    }

    .color-variant {
      width: 20px;
      height: 20px;
    }
    
    .colors-available {
      font-size: 12px;
    }

    .brand-banner {
      height: 70vh;
      min-height: 400px;
    }

    .tabs {
      gap: 24px;
      height: 44px;
    }

    .tab-icon {
      width: 18px;
      height: 18px;
    }

    .tab-text {
      font-size: 12px;
    }

    /* Mobile swiper optimizations */
    .swiper-navigation {
      width: 20px;
      height: 20px;
    }

    .swiper-navigation svg {
      width: 10px;
      height: 10px;
    }

    .swiper-prev {
      left: 4px;
    }

    .swiper-next {
      right: 4px;
    }

    .swiper-pagination {
      bottom: 4px;
    }

    .swiper-dot {
      width: 5px;
      height: 5px;
    }

    .product-swiper {
      touch-action: pan-y pinch-zoom;
    }

    .feature-rating .loox-icon {
      width: 12px !important;
      height: 12px !important;
    }

    .feature-rating .loox-rating-stars svg {
      width: 12px;
      height: 12px;
    }

    .feature-rating .loox-rating {
      font-size: 12px;
    }

    .feature-rating .loox-rating-count {
      font-size: 12px;
    }
  }

  @media screen and (max-width: 374px) {
    .page-title {
      font-size: 18px;
      padding-left: 4px;
    }

    .header-actions {
      gap: 12px;
    }

    .tabs {
      padding: 0 16px;
    }
    
    .tab-text {
      font-size: 14px;
    }
  }

  .collection-container {
    margin-top: 52px;
  }

  /* Wishlist Modal Styles - Enhanced UI/UX */
  .wishlist-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(4px);
    z-index: 9998;
    opacity: 0;
    visibility: hidden;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .wishlist-modal-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .wishlist-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.95);
    width: 95%;
    max-width: 480px;
    max-height: 85vh;
    background: white;
    border-radius: 20px;
    z-index: 9999;
    opacity: 0;
    visibility: hidden;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }

  .wishlist-modal.active {
    opacity: 1;
    visibility: visible;
    transform: translate(-50%, -50%) scale(1);
  }

  .wishlist-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 24px 24px 16px;
    background: linear-gradient(135deg, #1B224B 0%, #2A3362 100%);
    position: relative;
  }

  .wishlist-modal-header::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  }

  .wishlist-modal-header h3 {
    margin: 0;
    font-size: 22px;
    color: white;
    font-weight: 700;
  }



  .close-wishlist-modal {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .close-wishlist-modal:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: rotate(90deg);
  }

  .close-wishlist-modal svg {
    width: 20px;
    height: 20px;
    color: white;
    stroke-width: 2.5;
  }

  .wishlist-modal-content {
    padding: 20px;
    max-height: calc(85vh - 100px);
    overflow-y: auto;
    background: #FAFBFC;
  }

  .wishlist-modal-content::-webkit-scrollbar {
    width: 6px;
  }

  .wishlist-modal-content::-webkit-scrollbar-track {
    background: #F1F3F4;
    border-radius: 10px;
  }

  .wishlist-modal-content::-webkit-scrollbar-thumb {
    background: #D1D5DB;
    border-radius: 10px;
  }

  .wishlist-modal-content::-webkit-scrollbar-thumb:hover {
    background: #9CA3AF;
  }

  .wishlist-empty {
    text-align: center;
    padding: 60px 30px;
    background: white;
    border-radius: 16px;
    margin: 10px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .wishlist-empty-icon {
    width: 80px;
    height: 80px;
    margin: 0 auto 24px;
    color: #E5E7EB;
    opacity: 0.8;
  }

  .wishlist-empty h4 {
    margin: 0 0 12px 0;
    color: #1F2937;
    font-size: 24px;
    font-weight: 700;
  }

  .wishlist-empty p {
    margin: 0 0 32px 0;
    color: #6B7280;
    font-size: 16px;
    line-height: 1.5;
  }

  .browse-btn {
    background: linear-gradient(135deg, #1B224B 0%, #2A3362 100%);
    color: white;
    border: none;
    padding: 14px 28px;
    border-radius: 12px;
    font-weight: 600;
    font-size: 16px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    box-shadow: 0 4px 12px rgba(27, 34, 75, 0.3);
  }

  .browse-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(27, 34, 75, 0.4);
  }

  .wishlist-items {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .wishlist-modal-item {
    display: flex;
    gap: 16px;
    padding: 20px;
    background: white;
    border-radius: 16px;
    position: relative;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    border: 1px solid rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease;
    overflow: hidden;
  }

  .wishlist-modal-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #1B224B, #E73C17, #059669);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .wishlist-modal-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .wishlist-modal-item:hover::before {
    opacity: 1;
  }

  .wishlist-modal-item-image {
    position: relative;
    width: 90px;
    height: 90px;
    flex-shrink: 0;
    border-radius: 12px;
    overflow: hidden;
    background: #F8F9FA;
  }

  .wishlist-modal-item-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .wishlist-modal-item:hover .wishlist-modal-item-image img {
    transform: scale(1.05);
  }

  .remove-modal-wishlist-btn {
    position: absolute;
    top: 12px;
    right: 12px;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background: rgba(231, 60, 23, 0.9);
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255, 255, 255, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 2;
    transition: all 0.3s ease;
    opacity: 0.8;
  }

  .remove-modal-wishlist-btn:hover {
    background: rgba(197, 48, 0, 0.95);
    transform: scale(1.1) rotate(90deg);
    opacity: 1;
    box-shadow: 0 4px 12px rgba(231, 60, 23, 0.4);
  }

  .remove-modal-wishlist-btn svg {
    width: 18px;
    height: 18px;
    color: white;
    stroke-width: 2.5;
  }

  .wishlist-modal-item-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 90px;
  }

  .wishlist-modal-item-title {
    margin: 0 0 6px 0;
    font-size: 18px;
    color: #1F2937;
    font-weight: 700;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .wishlist-modal-item-price {
    margin: 0 0 16px 0;
    font-size: 20px;
    color: #1B224B;
    font-weight: 700;
  }

  .wishlist-modal-item-actions {
    display: flex;
    gap: 10px;
    margin-top: auto;
  }

  .view-modal-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    padding: 12px 20px;
    background: linear-gradient(135deg, #1B224B 0%, #2A3362 100%);
    color: white;
    text-decoration: none;
    border-radius: 10px;
    font-size: 14px;
    font-weight: 600;
    transition: all 0.3s ease;
    flex: 1;
    text-align: center;
    box-shadow: 0 3px 8px rgba(27, 34, 75, 0.2);
  }

  .view-modal-btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 16px rgba(27, 34, 75, 0.3);
  }

  .view-modal-btn svg {
    width: 16px;
    height: 16px;
    stroke-width: 2;
  }

  /* Enhanced Mobile Wishlist Modal */
  @media (max-width: 767px) {
    .wishlist-modal {
      width: 100%;
      max-width: 100%;
      max-height: 95vh;
      border-radius: 20px 20px 0 0;
      bottom: 0;
      top: auto;
      transform: translate(-50%, 100%);
    }

    .wishlist-modal.active {
      transform: translate(-50%, 0);
    }

    .wishlist-modal-header {
      padding: 20px 20px 12px;
    }

    .wishlist-modal-header h3 {
      font-size: 20px;
    }

    .wishlist-modal-content {
      max-height: calc(95vh - 80px);
      padding: 16px;
    }

    .wishlist-modal-item {
      padding: 16px;
      border-radius: 12px;
    }

    .wishlist-modal-item-image {
      width: 70px;
      height: 70px;
    }

    .wishlist-modal-item-title {
      font-size: 16px;
    }

    .wishlist-modal-item-price {
      font-size: 18px;
      margin-bottom: 12px;
    }

    .view-modal-btn {
      padding: 10px 16px;
      font-size: 13px;
    }

    .remove-modal-wishlist-btn {
      width: 32px;
      height: 32px;
      top: 8px;
      right: 8px;
    }

    .remove-modal-wishlist-btn svg {
      width: 16px;
      height: 16px;
    }

    .wishlist-empty {
      padding: 40px 20px;
      margin: 5px;
    }

    .wishlist-empty h4 {
      font-size: 20px;
    }

    .wishlist-empty p {
      font-size: 14px;
      margin-bottom: 24px;
    }

    .browse-btn {
      padding: 12px 24px;
      font-size: 14px;
    }
  }

  /* Add to Cart button states */
  .add-to-cart-form {
    margin: 0;
  }

  .add-to-cart.sold-out {
    background: #9CA3AF;
    cursor: not-allowed;
  }

  .add-to-cart .spinner {
    animation: spin 1s linear infinite;
    margin-right: 8px;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* Color scheme support */
  .product-card {
    background: {{ settings.card_color | default: '#ffffff' }};
    color: {{ settings.card_text_color }};
  }

  .product-name {
    color: {{ settings.card_heading_color }};
  }
{%- endstyle -%}

{%- paginate collection.products by section.settings.products_per_page -%}
  {%- if collection.products.size == 0 -%}
    <div class="collection collection--empty section-{{ section.id }}-padding">
      <div class="title-wrapper center">
        <h2 class="title title--primary">
          No products found
          <br>
          Try using fewer filters or <a href="{{ collection.url }}" class="underlined-link link">clear all</a>
        </h2>
      </div>
    </div>
  {%- else -%}
    <div class="top-nav">
      <div class="nav-left">
        <button class="nav-button" onclick="history.back()">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
            <path d="M15 18l-6-6 6-6"/>
          </svg>
        </button>
        <h1 class="collection-title-header">
          {{ collection.title }}
          <span class="collection-subtitle">{{ collection.products_count }} Products</span>
        </h1>
      </div>
      <div class="nav-right">
        <button class="nav-button wishlist-button" onclick="openWishlistModal()">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"/>
          </svg>
        </button>
        <a href="{{ routes.cart_url }}" class="nav-button cart-button">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round">
            <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"/>
            <line x1="3" y1="6" x2="21" y2="6"/>
            <path d="M16 10a4 4 0 0 1-8 0"/>
          </svg>
          <span class="cart-count">{{ cart.item_count }}</span>
        </a>
      </div>
    </div>

    <div class="collection-container">
      <div class="product-grid">
        {%- assign product_count = 0 -%}
        {%- for product in collection.products -%}
          {%- assign product_count = product_count | plus: 1 -%}
          <div class="product-card">
            <div class="product-image-wrapper">
              <div class="product-swiper" data-product-id="{{ product.id }}">
                <div class="swiper-container">
                  {%- if product.media.size > 0 -%}
                    {%- for media in product.media limit: 5 -%}
                      {%- if media.media_type == 'image' -%}
                        <div class="swiper-slide">
                          <a href="{{ product.url }}" class="product-link">
                            <img 
                              src="{{ media | image_url: width: 800 }}"
                              srcset="{{ media | image_url: width: 800 }} 800w,
                                      {{ media | image_url: width: 1200 }} 1200w,
                                      {{ media | image_url: width: 1600 }} 1600w"
                              sizes="(max-width: 749px) 100vw, 240px"
                              alt="{{ media.alt | escape }}"
                              class="product-image"
                              width="800"
                              height="800"
                              loading="lazy"
                            >
                          </a>
                        </div>
                      {%- endif -%}
                    {%- endfor -%}
                  {%- else -%}
                    <div class="swiper-slide">
                      <a href="{{ product.url }}" class="product-link">
                        {{ 'product-1' | placeholder_svg_tag: 'product-image placeholder' }}
                      </a>
                    </div>
                  {%- endif -%}
                </div>
                
                {%- assign image_count = 0 -%}
                {%- for media in product.media limit: 5 -%}
                  {%- if media.media_type == 'image' -%}
                    {%- assign image_count = image_count | plus: 1 -%}
                  {%- endif -%}
                {%- endfor -%}
                
                {%- if image_count > 1 -%}
                  <div class="swiper-navigation swiper-prev" onclick="previousImage(event, '{{ product.id }}')">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M15 18l-6-6 6-6"/>
                    </svg>
                  </div>
                  <div class="swiper-navigation swiper-next" onclick="nextImage(event, '{{ product.id }}')">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M9 18l6-6-6-6"/>
                    </svg>
                  </div>
                  <div class="swiper-pagination">
                    {%- for i in (1..image_count) -%}
                      <div class="swiper-dot{% if forloop.first %} active{% endif %}" onclick="goToSlide(event, '{{ product.id }}', {{ forloop.index0 }})"></div>
                    {%- endfor -%}
                  </div>
                {%- endif -%}
              </div>
            </div>
            
            <div class="product-info">
              <div class="product-info-top">
                <h3 class="product-brand">{{ product.vendor }}</h3>
                <a href="{{ product.url }}" class="product-name">{{ product.title }}</a>
                
                {%- if product.variants.size > 1 -%}
                  <div class="color-variants">
                    {%- assign unique_colors = '' | split: '' -%}
                    {%- for variant in product.variants -%}
                      {%- assign color_option = '' -%}
                      {%- for option in variant.options -%}
                        {%- if variant.option_names contains 'Color' or variant.option_names contains 'Colour' -%}
                          {%- assign color_option = option -%}
                          {%- break -%}
                        {%- endif -%}
                      {%- endfor -%}
                      
                      {%- unless unique_colors contains color_option -%}
                        {%- assign unique_colors = unique_colors | append: color_option | append: ',' -%}
                        <button 
                          class="color-variant{% if forloop.first %} active{% endif %}" 
                          style="background-color: {{ color_option | handleize }}"
                          title="{{ color_option }}"
                          data-variant-id="{{ variant.id }}"
                        >
                          <span class="color-variant-tooltip">{{ color_option }}</span>
                        </button>
                      {%- endunless -%}
                    {%- endfor -%}
                  </div>
                  {% assign color_count = unique_colors | split: ',' | size %}
                  <p class="colors-available">{{ color_count }} Colors Available</p>
                {%- endif -%}

                <div class="price-info">
                  <span class="current-price">
                    {{ product.price | money }}
                  </span>
                  {%- if product.compare_at_price > product.price -%}
                    <span class="original-price">{{ product.compare_at_price | money }}</span>
                    <span class="discount">
                      {{- product.compare_at_price | minus: product.price | times: 100.0 | divided_by: product.compare_at_price | round -}}% Off
                    </span>
                  {%- endif -%}
                </div>

                <div class="product-features">
                  <div class="feature">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M20 7l-8 8-4-4"/>
                    </svg>
                    In Stock
                  </div>
                  <div class="feature">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <rect x="3" y="4" width="18" height="18" rx="2" ry="2"/>
                      <line x1="16" y1="2" x2="16" y2="6"/>
                      <line x1="8" y1="2" x2="8" y2="6"/>
                      <line x1="3" y1="10" x2="21" y2="10"/>
                    </svg>
                    2-3 days delivery
                  </div>
                  <div class="feature feature-rating">
                    <!-- Loox Reviews Rating Widget -->
                    <div class="product-rating">
                      <!-- Standard Loox widget structure -->
                      <div class="loox-rating" 
                           data-id="{{ product.id }}" 
                           data-rating="{{ product.metafields.loox.avg_rating }}" 
                           data-raters="{{ product.metafields.loox.num_reviews }}"
                           data-product-id="{{ product.id }}"
                           id="loox-{{ product.id }}-{{ forloop.index }}">
                      </div>
                      
                      <!-- Alternative Loox integration -->
                      <div class="loox-reviews-default" 
                           data-product-id="{{ product.id }}" 
                           data-variant-id="{{ product.selected_or_first_available_variant.id }}">
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="product-actions">
                <form method="post" action="/cart/add" class="add-to-cart-form">
                  <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
                  <input type="hidden" name="quantity" value="1">
                  <button type="submit" class="add-to-cart{% unless product.available %} sold-out{% endunless %}"{% unless product.available %} disabled{% endunless %}>
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"/>
                      <line x1="3" y1="6" x2="21" y2="6"/>
                      <path d="M16 10a4 4 0 01-8 0"/>
                    </svg>
                    {% if product.available %}
                      Add to Cart
                    {% else %}
                      Sold Out
                    {% endif %}
                  </button>
                </form>
                
                <div class="quick-actions">
                  <button class="action-btn wishlist-btn" title="Add to Wishlist" onclick="toggleWishlist(this, '{{ product.id }}', event)">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z"/>
                    </svg>
                  </button>
                  <button class="action-btn share-btn" title="Share Product" onclick="shareProductLink('{{ product.url | prepend: request.host }}', '{{ product.title | escape }}')">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <circle cx="18" cy="5" r="3"/>
                      <circle cx="6" cy="12" r="3"/>
                      <circle cx="18" cy="19" r="3"/>
                      <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/>
                      <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
          </div>
        {%- endfor -%}
      </div>
    </div>

    <!-- Wishlist Modal -->
    <div class="wishlist-modal-overlay" id="wishlistModalOverlay" onclick="closeWishlistModal()"></div>
    <div class="wishlist-modal" id="wishlistModal">
      <div class="wishlist-modal-header">
        <h3>My Wishlist</h3>
        <button class="close-wishlist-modal" onclick="closeWishlistModal()">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"/>
            <line x1="6" y1="6" x2="18" y2="18"/>
          </svg>
        </button>
      </div>
      <div class="wishlist-modal-content" id="wishlistModalContent">
        <!-- Content will be populated by JavaScript -->
      </div>
    </div>
  {%- endif -%}
{%- endpaginate -%}

{% schema %}
{
  "name": "Collection",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 48,
      "step": 4,
      "default": 20,
      "label": "Products per page"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 36
    }
  ]
}
{% endschema %} 